# file opened: src/main.asm
  1   0000              ; this example demonstrates palette cycling on a precalculated 320x256 image
  2   0000
  3   0000              ; em00k 16/07/23
  4   0000
  5   0000
  6   0000
  7   0000                      SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
  8   0000                      DEVICE ZXSPECTRUMNEXT
  9   0000                      CSPECTMAP "320Cycle.map"
 10   0000
 11   0000                      include "hardware.inc"                          ; hardware equates
# file opened: src/hardware.inc
  1+  0000              BIT_UP			equ 4	; 16
  2+  0000              BIT_DOWN		equ 5	; 32
  3+  0000              BIT_LEFT		equ 6	; 64
  4+  0000              BIT_RIGHT		equ 7	; 128
  5+  0000
  6+  0000              DIR_NONE		equ %00000000
  7+  0000              DIR_UP			equ %00010000
  8+  0000              DIR_DOWN		equ %00100000
  9+  0000              DIR_LEFT		equ %01000000
 10+  0000              DIR_RIGHT		equ %10000000
 11+  0000
 12+  0000              DIR_UP_I		equ %11101111
 13+  0000              DIR_DOWN_I		equ %11011111
 14+  0000              DIR_LEFT_I		equ %10111111
 15+  0000              DIR_RIGHT_I		equ %01111111
 16+  0000
 17+  0000              ;-----------------------------------------------------------------------------
 18+  0000              ;-- I/O ports - ZX Spectrum classic (48, 128, Timex, Pentagon, ...) ports
 19+  0000
 20+  0000              ULA_P_FE                        equ $FE     ; BORDER + MIC + BEEP + read Keyboard
 21+  0000              TIMEX_P_FF                      equ $FF     ; Timex video control port
 22+  0000
 23+  0000              ZX128_MEMORY_P_7FFD             equ $7FFD   ; ZX Spectrum 128 ports
 24+  0000              ZX128_MEMORY_P_DFFD             equ $DFFD
 25+  0000              ZX128P3_MEMORY_P_1FFD           equ $1FFD
 26+  0000
 27+  0000              AY_REG_P_FFFD                   equ $FFFD
 28+  0000              AY_DATA_P_BFFD                  equ $BFFD
 29+  0000
 30+  0000              Z80_DMA_PORT_DATAGEAR           equ $6B     ; on ZXN the zxnDMA handles this in zxnDMA mode
 31+  0000              Z80_DMA_PORT_MB02               equ $0B     ; on ZXN the zxnDMA handles this in Zilog mode
 32+  0000
 33+  0000              DIVMMC_CONTROL_P_E3             equ $E3
 34+  0000              SPI_CS_P_E7                     equ $E7
 35+  0000              SPI_DATA_P_EB                   equ $EB
 36+  0000
 37+  0000              KEMPSTON_MOUSE_X_P_FBDF         equ $FBDF
 38+  0000              KEMPSTON_MOUSE_Y_P_FFDF         equ $FFDF
 39+  0000              KEMPSTON_MOUSE_B_P_FADF         equ $FADF   ; kempston mouse wheel+buttons
 40+  0000
 41+  0000              KEMPSTON_JOY1_P_1F              equ $1F
 42+  0000              KEMPSTON_JOY2_P_37              equ $37
 43+  0000
 44+  0000              ;-----------------------------------------------------------------------------
 45+  0000              ;-- I/O ports - ZX Spectrum NEXT specific ports
 46+  0000
 47+  0000              TBBLUE_REGISTER_SELECT_P_243B   equ $243B
 48+  0000                  ; -- port $243B = 9275  Read+Write (detection bitmask: %0010_0100_0011_1011)
 49+  0000                  ;   -- selects NextREG mapped at port TBBLUE_REGISTER_ACCESS_P_253B
 50+  0000
 51+  0000              TBBLUE_REGISTER_ACCESS_P_253B   equ $253B
 52+  0000                  ; -- port $253B = 9531  Read?+Write? (detection bitmask: %0010_0101_0011_1011)
 53+  0000                  ;   -- data for selected NextREG (read/write depends on the register selected)
 54+  0000
 55+  0000              ; indexes into DAC_CHANNEL_* def-arrays, depending on the type of DAC you want to use
 56+  0000              DAC_GS_COVOX_INDEX              equ     1
 57+  0000              DAC_PENTAGON_ATM_INDEX          equ     2
 58+  0000              DAC_SPECDRUM_INDEX              equ     3
 59+  0000              DAC_SOUNDRIVE1_INDEX            equ     4
 60+  0000              DAC_SOUNDRIVE2_INDEX            equ     5
 61+  0000              DAC_COVOX_INDEX                 equ     6
 62+  0000              DAC_PROFI_COVOX_INDEX           equ     7
 63+  0000                  ; -- enable 8bit DACs with PERIPHERAL_3_NR_08, use DAC_*_INDEX to access particular set of ports
 64+  0000                  ;DEFARRAY    DAC_CHANNEL_A  @@,  @@, $FB, $DF, $1F, $F1,  @@, $3F
 65+  0000                  ;DEFARRAY    DAC_CHANNEL_B  @@, $B3,  @@,  @@, $0F, $F3, $0F,  @@
 66+  0000                  ;DEFARRAY    DAC_CHANNEL_C  @@, $B3,  @@,  @@, $4F, $F9, $4F,  @@
 67+  0000                  ;DEFARRAY    DAC_CHANNEL_D  @@,  @@, $FB, $DF, $5F, $FB,  @@, $5F
 68+  0000                  ; -- like for example: ld bc,DAC_CHANNEL_B[DAC_PROFI_COVOX_INDEX]
 69+  0000
 70+  0000              I2C_SCL_P_103B                  equ $103B   ; i2c bus port (clock) (write only?)
 71+  0000              I2C_SDA_P_113B                  equ $113B   ; i2c bus port (data) (read+write)
 72+  0000              UART_TX_P_133B                  equ $133B   ; UART tx port (read+write)
 73+  0000              UART_RX_P_143B                  equ $143B   ; UART rx port (read+write)
 74+  0000              UART_CTRL_P_153B                equ $153B   ; UART control port (read+write)
 75+  0000
 76+  0000              ZILOG_DMA_P_0B                  equ $0B
 77+  0000              ZXN_DMA_P_6B                    equ $6B
 78+  0000                  ; -- port $6B = 107 Read+Write (detection bitmask: %xxxx_xxxx_0110_1011)
 79+  0000                  ;   - The zxnDMA is mostly compatible with Zilog DMA chip (Z8410) (at least
 80+  0000                  ;     as far as old ZX apps are concerned), but has many modifications.
 81+  0000                  ;   - core3.1.1 update - Zilog/zxnDMA mode is now selected by port number, not PERIPHERAL_2_NR_06!
 82+  0000                  ;   - core3.0 update - (REMOVED) specific behaviour details can be selected (PERIPHERAL_2_NR_06)
 83+  0000
 84+  0000              LAYER2_ACCESS_P_123B            equ $123B
 85+  0000                  ; -- port $123B = 4667 Read+Write (detection bitmask: %0001_0010_0011_1011)
 86+  0000                  ;   - see ports.txt or wiki for details (has become a bit more complex over time)
 87+  0000
 88+  0000              LAYER2_ACCESS_WRITE_OVER_ROM    equ $01     ; map Layer2 bank into ROM area (0000..3FFF) for WRITE-only (reads as ROM)
 89+  0000              LAYER2_ACCESS_L2_ENABLED        equ $02     ; enable Layer2 (make banks form nextreg $12 visible)
 90+  0000              LAYER2_ACCESS_READ_OVER_ROM     equ $04     ; map Layer2 bank into ROM area (0000..3FFF) for READ-only
 91+  0000              LAYER2_ACCESS_SHADOW_OVER_ROM   equ $08     ; bank selected by bits 6-7 is from "shadow Layer 2" banks range (nextreg $13)
 92+  0000              LAYER2_ACCESS_BANK_OFFSET       equ $10     ; bit 2-0 is bank offset for current active mapping +0..+7 (other bits are reserved, use 0)
 93+  0000              LAYER2_ACCESS_OVER_ROM_BANK_M   equ $C0     ; (mask of) value 0..3 selecting bank mapped for R/W (Nextreg $12 or $13)
 94+  0000              LAYER2_ACCESS_OVER_ROM_BANK_0   equ $00     ; screen lines 0..63    (256x192) or columns 0..63    (320x256) or columns 0..127   (640x256)
 95+  0000              LAYER2_ACCESS_OVER_ROM_BANK_1   equ $40     ; screen lines 64..127  (256x192) or columns 64..127  (320x256) or columns 128..255 (640x256)
 96+  0000              LAYER2_ACCESS_OVER_ROM_BANK_2   equ $80     ; screen lines 128..191 (256x192) or columns 128..191 (320x256) or columns 256..383 (640x256)
 97+  0000              LAYER2_ACCESS_OVER_ROM_48K      equ $C0     ; maps all 0..191 lines into $0000..$BFFF region (256x192) or 2/3 of columns in 320x256/640x256
 98+  0000
 99+  0000              SPRITE_STATUS_SLOT_SELECT_P_303B    equ $303B
100+  0000                  ; -- port $303B = 12347  Read+Write (detection bitmask: %0011_0000_0011_1011)
101+  0000                  ;   -- write:
102+  0000                  ;     - sets both "sprite slot" (0..63) and "pattern slot" (0..63 +128)
103+  0000                  ;     - once the sprite/pattern slots are set, they act independently and
104+  0000                  ;     each port ($xx57 and $xx5B) will auto-increment its own slot index
105+  0000                  ;     (to resync one can write to this port again).
106+  0000                  ;     - the +128 flag will make the pattern upload start at byte 128 of pattern
107+  0000                  ;     slot (second half of slot)
108+  0000                  ;     - The sprite-slot (sprite-attributes) may be optionally interlinked with
109+  0000                  ;     NextReg $34 (feature controlled by NextReg $34)
110+  0000                  ;     - auto-increments of slot position from value 63 are officially
111+  0000                  ;     "undefined behaviour", wrap to 0 is not guaranteed. (only setting slots
112+  0000                  ;     explicitly back to valid 0..63 will make your code future-proof)
113+  0000                  ;   -- read (will also reset both collision and max-sprites flags):
114+  0000                  ;     - bit 1 = maximum sprites per line hit (set when sprite renderer ran
115+  0000                  ;               out of time when preparing next scanline)
116+  0000                  ;     - bit 0 = collision flag (set when any sprites draw non-transparent
117+  0000                  ;               pixel at the same location)
118+  0000                  ;     Both flags contain values for current scanline already at the beginning
119+  0000                  ;     of scanline (sprite engine renders one line ahead into buffer and updates
120+  0000                  ;     flags progressively as it renders the sprites)
121+  0000              SPRITE_STATUS_MAXIMUM_SPRITES   equ $02
122+  0000              SPRITE_STATUS_COLLISION         equ $01
123+  0000              SPRITE_SLOT_SELECT_PATTERN_HALF equ 128     ; add it to 0..63 index to make pattern upload start at second half of pattern
124+  0000
125+  0000              SPRITE_ATTRIBUTE_P_57           equ $57
126+  0000                  ; -- port $xx57 = 87 write-only (detection bitmask: %xxxx_xxxx_0101_0111)
127+  0000                  ;  - writing 4 or 5 bytes long structures to control particular sprite
128+  0000                  ;  - after 4/5 bytes block the sprite slot index is auto-incremented
129+  0000                  ;  - for detailed documentation check official docs or wiki (too long)
130+  0000
131+  0000              SPRITE_PATTERN_P_5B             equ $5B
132+  0000                  ; -- port $xx5B = 91 write-only (detection bitmask: %xxxx_xxxx_0101_1011)
133+  0000                  ;  - each pattern slot is 256 bytes long = one 16x16 pattern of 8-bit pixels
134+  0000                  ;    or two 16x16 patterns of 4-bit pixels.
135+  0000                  ;  - Patterns are uploaded in "English" order (left to right, top to bottom),
136+  0000                  ;    one byte encodes single pixel in 8 bit mode and two pixels in 4 bit
137+  0000                  ;    mode (bits 7-4 are "left" pixel, 3-0 are "right" pixel)
138+  0000                  ;  - pixels are offset (index) into active sprite palette
139+  0000
140+  0000              TURBO_SOUND_CONTROL_P_FFFD      equ $FFFD   ; write with bit 7 = 1 (port shared with AY)
141+  0000
142+  0000              ;-----------------------------------------------------------------------------
143+  0000              ;-- NEXT HW Registers (NextReg)
144+  0000              MACHINE_ID_NR_00                equ $00
145+  0000              NEXT_VERSION_NR_01              equ $01
146+  0000              NEXT_RESET_NR_02                equ $02
147+  0000              MACHINE_TYPE_NR_03              equ $03
148+  0000              ROM_MAPPING_NR_04               equ $04     ;In config mode, allows RAM to be mapped to ROM area.
149+  0000              PERIPHERAL_1_NR_05              equ $05     ;Sets joystick mode, video frequency and Scandoubler.
150+  0000              PERIPHERAL_2_NR_06              equ $06     ;Enables turbo/50Hz/60Hz keys, DivMMC, Multiface and audio (beep/AY)
151+  0000              TURBO_CONTROL_NR_07             equ $07
152+  0000              PERIPHERAL_3_NR_08              equ $08     ;ABC/ACB Stereo, Internal Speaker, SpecDrum, Timex Video Modes, Turbo Sound Next, RAM contention and [un]lock 128k paging.
153+  0000              PERIPHERAL_4_NR_09              equ $09     ;Sets scanlines, AY mono output, Sprite-id lockstep, disables Kempston and divMMC ports.
154+  0000              PERIPHERAL_5_NR_0A              equ $0A     ;Mouse buttons and DPI settings (core 3.1.5)
155+  0000              NEXT_VERSION_MINOR_NR_0E        equ $0E
156+  0000              ANTI_BRICK_NR_10                equ $10
157+  0000              VIDEO_TIMING_NR_11              equ $11
158+  0000              LAYER2_RAM_BANK_NR_12           equ $12     ;bank number where visible Layer 2 video memory begins.
159+  0000              LAYER2_RAM_SHADOW_BANK_NR_13    equ $13     ;bank number for "shadow" write-over-rom mapping
160+  0000              GLOBAL_TRANSPARENCY_NR_14       equ $14     ;Sets the color treated as transparent for ULA/Layer2/LoRes
161+  0000              SPRITE_CONTROL_NR_15            equ $15     ;LoRes mode, Sprites configuration, layers priority
162+  0000                  ; bit 7: enable LoRes mode
163+  0000                  ; bit 6: sprite rendering (1=sprite 0 on top of other, 0=sprite 0 at bottom)
164+  0000                  ; bit 5: If 1, the clipping works even in "over border" mode
165+  0000                  ; 4-2: layers priority: 000=SLU, 001=LSU, 010=SUL, 011=LUS, 100=USL, 101=ULS, 110=S,mix(U+L), 111=S,mix(U+L-5)
166+  0000                  ; bit 1: enable sprites over border, bit 0: show sprites
167+  0000              LAYER2_XOFFSET_NR_16            equ $16
168+  0000              LAYER2_YOFFSET_NR_17            equ $17
169+  0000              CLIP_LAYER2_NR_18               equ $18
170+  0000              CLIP_SPRITE_NR_19               equ $19
171+  0000              CLIP_ULA_LORES_NR_1A            equ $1A
172+  0000              CLIP_TILEMAP_NR_1B              equ $1B
173+  0000              CLIP_WINDOW_CONTROL_NR_1C       equ $1C     ;set to 15 to reset all clip-window indices to 0
174+  0000              VIDEO_LINE_MSB_NR_1E            equ $1E
175+  0000              VIDEO_LINE_LSB_NR_1F            equ $1F
176+  0000              VIDEO_INTERUPT_CONTROL_NR_22    equ $22     ;Controls the timing of raster interrupts and the ULA frame interrupt.
177+  0000              VIDEO_INTERUPT_VALUE_NR_23      equ $23
178+  0000              ULA_XOFFSET_NR_26               equ $26     ;since core 3.0
179+  0000              ULA_YOFFSET_NR_27               equ $27     ;since core 3.0
180+  0000              HIGH_ADRESS_KEYMAP_NR_28        equ $28     ;reads first 8b part of value written to $44 (even unfinished 16b write)
181+  0000              LOW_ADRESS_KEYMAP_NR_29         equ $29
182+  0000              HIGH_DATA_TO_KEYMAP_NR_2A       equ $2A
183+  0000              LOW_DATA_TO_KEYMAP_NR_2B        equ $2B
184+  0000              DAC_B_MIRROR_NR_2C              equ $2C     ;reads as MSB of Pi I2S left side sample, LSB waits at $2D
185+  0000              DAC_AD_MIRROR_NR_2D             equ $2D     ;another alias for $2D, reads LSB of value initiated by $2C or $2E read
186+  0000              SOUNDDRIVE_DF_MIRROR_NR_2D      equ $2D     ;Nextreg port-mirror of port 0xDF
187+  0000              DAC_C_MIRROR_NR_2E              equ $2E     ;reads as MSB of Pi I2S right side sample, LSB waits at $2D
188+  0000              TILEMAP_XOFFSET_MSB_NR_2F       equ $2F
189+  0000              TILEMAP_XOFFSET_LSB_NR_30       equ $30
190+  0000              TILEMAP_YOFFSET_NR_31           equ $31
191+  0000              LORES_XOFFSET_NR_32             equ $32
192+  0000              LORES_YOFFSET_NR_33             equ $33
193+  0000              SPRITE_ATTR_SLOT_SEL_NR_34      equ $34     ;Sprite-attribute slot index for $35-$39/$75-$79 port $57 mirrors
194+  0000              SPRITE_ATTR0_NR_35              equ $35     ;port $57 mirror in nextreg space (accessible to copper)
195+  0000              SPRITE_ATTR1_NR_36              equ $36
196+  0000              SPRITE_ATTR2_NR_37              equ $37
197+  0000              SPRITE_ATTR3_NR_38              equ $38
198+  0000              SPRITE_ATTR4_NR_39              equ $39
199+  0000              PALETTE_INDEX_NR_40             equ $40     ;Chooses a ULANext palette number to configure.
200+  0000              PALETTE_VALUE_NR_41             equ $41     ;Used to upload 8-bit colors to the ULANext palette.
201+  0000              PALETTE_FORMAT_NR_42            equ $42     ;ink-mask for ULANext modes
202+  0000              PALETTE_CONTROL_NR_43           equ $43     ;Enables or disables ULANext interpretation of attribute values and toggles active palette.
203+  0000              PALETTE_VALUE_9BIT_NR_44        equ $44     ;Holds the additional blue color bit for RGB333 color selection.
204+  0000              TRANSPARENCY_FALLBACK_COL_NR_4A equ $4A     ;8-bit colour to be drawn when all layers are transparent
205+  0000              SPRITE_TRANSPARENCY_I_NR_4B     equ $4B     ;index of transparent colour in sprite palette (only bottom 4 bits for 4-bit patterns)
206+  0000              TILEMAP_TRANSPARENCY_I_NR_4C    equ $4C     ;index of transparent colour in tilemap graphics (only bottom 4 bits)
207+  0000              MMU0_0000_NR_50                 equ $50     ;Set a Spectrum RAM page at position 0x0000 to 0x1FFF
208+  0000              MMU1_2000_NR_51                 equ $51     ;Set a Spectrum RAM page at position 0x2000 to 0x3FFF
209+  0000              MMU2_4000_NR_52                 equ $52     ;Set a Spectrum RAM page at position 0x4000 to 0x5FFF
210+  0000              MMU3_6000_NR_53                 equ $53     ;Set a Spectrum RAM page at position 0x6000 to 0x7FFF
211+  0000              MMU4_8000_NR_54                 equ $54     ;Set a Spectrum RAM page at position 0x8000 to 0x9FFF
212+  0000              MMU5_A000_NR_55                 equ $55     ;Set a Spectrum RAM page at position 0xA000 to 0xBFFF
213+  0000              MMU6_C000_NR_56                 equ $56     ;Set a Spectrum RAM page at position 0xC000 to 0xDFFF
214+  0000              MMU7_E000_NR_57                 equ $57     ;Set a Spectrum RAM page at position 0xE000 to 0xFFFF
215+  0000              COPPER_DATA_NR_60               equ $60
216+  0000              COPPER_CONTROL_LO_NR_61         equ $61
217+  0000              COPPER_CONTROL_HI_NR_62         equ $62
218+  0000              COPPER_DATA_16B_NR_63           equ $63     ; same as $60, but waits for full 16b before write
219+  0000              VIDEO_LINE_OFFSET_NR_64         equ $64     ; (core 3.1.5)
220+  0000              ULA_CONTROL_NR_68               equ $68
221+  0000              DISPLAY_CONTROL_NR_69           equ $69
222+  0000              LORES_CONTROL_NR_6A             equ $6A
223+  0000              TILEMAP_CONTROL_NR_6B           equ $6B
224+  0000              TILEMAP_DEFAULT_ATTR_NR_6C      equ $6C
225+  0000              TILEMAP_BASE_ADR_NR_6E          equ $6E     ;Tilemap base address of map
226+  0000              TILEMAP_GFX_ADR_NR_6F           equ $6F     ;Tilemap definitions (graphics of tiles)
227+  0000              LAYER2_CONTROL_NR_70            equ $70
228+  0000              LAYER2_XOFFSET_MSB_NR_71        equ $71     ; for 320x256 and 640x256 L2 modes (core 3.0.6+)
229+  0000              SPRITE_ATTR0_INC_NR_75          equ $75     ;port $57 mirror in nextreg space (accessible to copper) (slot index++)
230+  0000              SPRITE_ATTR1_INC_NR_76          equ $76
231+  0000              SPRITE_ATTR2_INC_NR_77          equ $77
232+  0000              SPRITE_ATTR3_INC_NR_78          equ $78
233+  0000              SPRITE_ATTR4_INC_NR_79          equ $79
234+  0000              USER_STORAGE_0_NR_7F            equ $7F
235+  0000              EXPANSION_BUS_ENABLE_NR_80      equ $80
236+  0000              EXPANSION_BUS_CONTROL_NR_81     equ $81
237+  0000              INTERNAL_PORT_DECODING_0_NR_82  equ $82     ;bits 0-7
238+  0000              INTERNAL_PORT_DECODING_1_NR_83  equ $83     ;bits 8-15
239+  0000              INTERNAL_PORT_DECODING_2_NR_84  equ $84     ;bits 16-23
240+  0000              INTERNAL_PORT_DECODING_3_NR_85  equ $85     ;bits 24-31
241+  0000              EXPANSION_BUS_DECODING_0_NR_86  equ $86     ;bits 0-7 mask
242+  0000              EXPANSION_BUS_DECODING_1_NR_87  equ $87     ;bits 8-15 mask
243+  0000              EXPANSION_BUS_DECODING_2_NR_88  equ $88     ;bits 16-23 mask
244+  0000              EXPANSION_BUS_DECODING_3_NR_89  equ $89     ;bits 24-31 mask
245+  0000              EXPANSION_BUS_PROPAGATE_NR_8A   equ $8A     ;Monitoring internal I/O or adding external keyboard
246+  0000              ALTERNATE_ROM_NR_8C             equ $8C     ;Enable alternate ROM or lock 48k ROM
247+  0000              ZX_MEM_MAPPING_NR_8E            equ $8E     ;shortcut to set classic zx128+3 memory model at one place
248+  0000              PI_GPIO_OUT_ENABLE_0_NR_90      equ $90     ;pins 0-7
249+  0000              PI_GPIO_OUT_ENABLE_1_NR_91      equ $91     ;pins 8-15
250+  0000              PI_GPIO_OUT_ENABLE_2_NR_92      equ $92     ;pins 16-23
251+  0000              PI_GPIO_OUT_ENABLE_3_NR_93      equ $93     ;pins 24-27
252+  0000              PI_GPIO_0_NR_98                 equ $98     ;pins 0-7
253+  0000              PI_GPIO_1_NR_99                 equ $99     ;pins 8-15
254+  0000              PI_GPIO_2_NR_9A                 equ $9A     ;pins 16-23
255+  0000              PI_GPIO_3_NR_9B                 equ $9B     ;pins 24-27
256+  0000              PI_PERIPHERALS_ENABLE_NR_A0     equ $A0
257+  0000              PI_I2S_AUDIO_CONTROL_NR_A2      equ $A2
258+  0000              ;PI_I2S_CLOCK_DIVIDE_NR_A3       equ $A3    ; REMOVED in core 3.1.5 (no more master-mode)
259+  0000              ESP_WIFI_GPIO_OUTPUT_NR_A8      equ $A8
260+  0000              ESP_WIFI_GPIO_NR_A9             equ $A9
261+  0000              EXTENDED_KEYS_0_NR_B0           equ $B0     ;read Next compound keys as standalone keys (outside of zx48 matrix)
262+  0000              EXTENDED_KEYS_1_NR_B1           equ $B1     ;read Next compound keys as standalone keys (outside of zx48 matrix)
263+  0000              ;DIVMMC_TRAP_ENABLE_1_NR_B2      equ $B2    ; NOT IMPLEMENTED in core yet (as of 3.1.4), may happen in future
264+  0000              ;DIVMMC_TRAP_ENABLE_2_NR_B4      equ $B4    ; NOT IMPLEMENTED in core yet (as of 3.1.4), may happen in future
265+  0000              DEBUG_LED_CONTROL_NR_FF         equ $FF     ;Turns debug LEDs on and off on TBBlue implementations that have them.
266+  0000
267+  0000              ;-----------------------------------------------------------------------------
268+  0000              ;-- common memory addresses
269+  0000              MEM_ROM_CHARS_3C00              equ $3C00   ; actual chars start at $3D00 with space
270+  0000              MEM_ZX_SCREEN_4000              equ $4000
271+  0000              MEM_ZX_ATTRIB_5800              equ $5800
272+  0000              MEM_LORES0_4000                 equ $4000
273+  0000              MEM_LORES1_6000                 equ $6000
274+  0000              MEM_TIMEX_SCR0_4000             equ $4000
275+  0000              MEM_TIMEX_SCR1_6000             equ $6000
276+  0000
277+  0000              ;-----------------------------------------------------------------------------
278+  0000              ;-- Copper commands
279+  0000              COPPER_NOOP                     equ %00000000
280+  0000              COPPER_WAIT_H                   equ %10000000
281+  0000              COPPER_HALT_B                   equ $FF   ; 2x $FF = wait for (511,63) = infinite wait
282+  0000
283+  0000              ;-----------------------------------------------------------------------------
284+  0000              ; DMA (Register 6)
285+  0000              DMA_RESET					equ $C3
286+  0000              DMA_RESET_PORT_A_TIMING		equ $C7
287+  0000              DMA_RESET_PORT_B_TIMING		equ $CB
288+  0000              DMA_LOAD					equ $CF
289+  0000              DMA_CONTINUE				equ $D3
290+  0000              DMA_DISABLE_INTERUPTS		equ $AF
291+  0000              DMA_ENABLE_INTERUPTS		equ $AB
292+  0000              DMA_RESET_DISABLE_INTERUPTS	equ $A3
293+  0000              DMA_ENABLE_AFTER_RETI		equ $B7
294+  0000              DMA_READ_STATUS_BYTE		equ $BF
295+  0000              DMA_REINIT_STATUS_BYTE		equ $8B
296+  0000              DMA_START_READ_SEQUENCE		equ $A7
297+  0000              DMA_FORCE_READY				equ $B3
298+  0000              DMA_DISABLE					equ $83
299+  0000              DMA_ENABLE					equ $87
300+  0000              DMA_READ_MASK_FOLLOWS		equ $BB
301+  0000              KEYB        equ $7F10
302+  0000              KEYN        equ $7F08
303+  0000              KEYM        equ $7F04
304+  0000              KEYSYMBOL   equ $7F02
305+  0000              KEYSPACE    equ $7F01
306+  0000              KEYH        equ $BF10
307+  0000              KEYJ        equ $BF08
308+  0000              KEYK        equ $BF04
309+  0000              KEYL        equ $BF02
310+  0000              KEYENTER    equ $BF01
311+  0000              KEYY        equ $DF10
312+  0000              KEYU        equ $DF08
313+  0000              KEYI        equ $DF04
314+  0000              KEYO        equ $DF02
315+  0000              KEYP        equ $DF01
316+  0000              KEY6        equ $EF10
317+  0000              KEY7        equ $EF08
318+  0000              KEY8        equ $EF04
319+  0000              KEY9        equ $EF02
320+  0000              KEY0        equ $EF01
321+  0000              KEY5        equ $F710
322+  0000              KEY4        equ $F708
323+  0000              KEY3        equ $F704
324+  0000              KEY2        equ $F702
325+  0000              KEY1        equ $F701
326+  0000              KEYT        equ $FB10
327+  0000              KEYR        equ $FB08
328+  0000              KEYE        equ $FB04
329+  0000              KEYW        equ $FB02
330+  0000              KEYQ        equ $FB01
331+  0000              KEYG       equ $FD10
332+  0000              KEYF       equ $FD08
333+  0000              KEYD       equ $FD04
334+  0000              KEYS       equ $FD02
335+  0000              KEYA       equ $FD01
336+  0000              KEYV       equ $FE10
337+  0000              KEYC       equ $FE08
338+  0000              KEYX       equ $FE04
339+  0000              KEYZ       equ $FE02
340+  0000              KEYCAPS    equ $FE01
# file closed: src/hardware.inc
 12   0000
 13   0000                      output   main.bin
 14   0000                      org     $8000
 15   8000
 16   8000              main:
 17   8000 F3                   di
 18   8001                      ; set up hardware
 19   8001 ED 91 07 03          nextreg TURBO_CONTROL_NR_07,3                   ; 28mhz
 20   8005 ED 91 14 00          nextreg GLOBAL_TRANSPARENCY_NR_14,0             ; black
 21   8009 ED 91 4B 00          nextreg SPRITE_TRANSPARENCY_I_NR_4B,0           ; black
 22   800D ED 91 4A 00          nextreg TRANSPARENCY_FALLBACK_COL_NR_4A,$0      ; black
 23   8011 ED 91 15 0B          nextreg SPRITE_CONTROL_NR_15,%00001011          ; Layer order
 24   8015 ED 91 70 10  	nextreg LAYER2_CONTROL_NR_70,%000'1'0000        ; 320x256 L2
 25   8019 ED 91 68 80          nextreg ULA_CONTROL_NR_68, %10000000            ; turn off ULA
 26   801D
 27   801D ED 91 12 09          nextreg LAYER2_RAM_BANK_NR_12,9                 ; layer2 rams   16kb banks so 9*2 = BANKS 18
 28   8021 ED 91 69 80  	nextreg DISPLAY_CONTROL_NR_69,%10000000
 29   8025
 30   8025 CD 62 81             call    set_clipping                            ; clip L2 to 320x256 and ULA to 0x0
 31   8028
 32   8028 ED 91 43 10          nextreg PALETTE_CONTROL_NR_43,%00010000		; set L2 palette
 33   802C 3E C8                ld      a, 200                                   ; lower value will use more colours form the palette
 34   802E CD 83 81             call    gen_palette                             ; generate palette
 35   8031
 36   8031 AF                   xor     a
 37   8032 D3 FE                out     ($fe), a                                ; black border
 38   8034
 39   8034
 40   8034              main_loop:
 41   8034
 42   8034 CD 11 81             call    Vsync                                   ; wait for vsync
 43   8037 CD BF 81             call    pal_cycle                               ; cycle colours
 44   803A
 45   803A 18 F8                jr      main_loop                               ; repeat loop
 46   803C
 47   803C              ;------------------------------------------------------------------------------
 48   803C              ; Stack reservation
 49   803C              STACK_SIZE      equ     100
 50   803C
 51   803C              stack_bottom:
 52   803C 00 00 00...          defs    STACK_SIZE * 2
 53   8104              stack_top:
 54   8104 00 00                defw    0
 55   8106
 56   8106              ;------------------------------------------------------------------------------
 57   8106              ; includes
 58   8106
 59   8106                      include "utils.asm"
# file opened: src/utils.asm
  1+  8106
  2+  8106              ;------------------------------------------------------------------------------
  3+  8106              ; Utils
  4+  8106
  5+  8106              getRegister:
  6+  8106
  7+  8106              ; IN A > Register to read
  8+  8106              ; OUT A < Value of Register
  9+  8106
 10+  8106 C5               push    bc                                  ; save BC
 11+  8107 01 3B 24         ld      bc, TBBLUE_REGISTER_SELECT_P_243B
 12+  810A ED 79            out     (c), a
 13+  810C 04               inc     b
 14+  810D ED 78            in      a, (c)
 15+  810F C1               pop     bc
 16+  8110 C9               ret
 17+  8111
 18+  8111
 19+  8111
 20+  8111              ; Vsync wait
 21+  8111
 22+  8111              Vsync:
 23+  8111 21 01 00                 ld      hl, 1
 24+  8114              .readline:
 25+  8114 3E 1F        			ld 		a,VIDEO_LINE_LSB_NR_1F
 26+  8116 01 3B 24     			ld 		bc,TBBLUE_REGISTER_SELECT_P_243B
 27+  8119 ED 79        			out 	(c),a
 28+  811B 04           			inc 	b
 29+  811C ED 78        			in 		a,(c)
 30+  811E FE C0        			cp 		192				; line to wait for
 31+  8120 20 F2        			jr 		nz,.readline
 32+  8122 2B           			dec 	hl
 33+  8123 7C           			ld 		a,h
 34+  8124 B5           			or 		l
 35+  8125 20 ED        			jr 		nz,.readline
 36+  8127 C9                       ret
# file closed: src/utils.asm
 60   8128                      include "layer2.asm"
# file opened: src/layer2.asm
  1+  8128              clsL2:
  2+  8128              	; Clears L2 320x256 with A as colour
  3+  8128              	; IN A > colour
  4+  8128              	; USES : hl, de, bc, a
  5+  8128
  6+  8128 32 43 81     		ld          (.colour+1), a
  7+  812B 3E 12        		ld          a, $12 				; $12 is L2 RAM start bank register
  8+  812D CD 06 81     		call        getRegister 		; get L2 ram bank in a
  9+  8130 87           		add         a, a                ; A = start of L2 ram, we need to *2
 10+  8131 06 05        		ld          b, 5                ; 3 blocks to do
 11+  8133
 12+  8133              .L2loop:
 13+  8133 C5           		push        bc 					; save loop counter
 14+  8134
 15+  8134 ED 92 50     		nextreg     MMU0_0000_NR_50, a  ; set 0 - $1fff
 16+  8137 3C           		inc         a
 17+  8138 ED 92 51     		nextreg     MMU1_2000_NR_51, a  ; set 0 - $1fff
 18+  813B 3C           		inc         a
 19+  813C
 20+  813C 21 00 00     		ld          hl, 0 				; start at address 0
 21+  813F 11 01 00     		ld          de, 1
 22+  8142              .colour:
 23+  8142 36 14        		ld          (hl), 20            ; smc colour from above
 24+  8144 01 FF 3F     		ld          bc, $3fff			; bytes to clear
 25+  8147 ED B0        		ldir
 26+  8149 C1           		pop         bc 					; bring back loop counter
 27+  814A 10 E7        		djnz        .L2loop 			; repeat until b = 0
 28+  814C
 29+  814C              		; restore ROMS
 30+  814C
 31+  814C ED 91 50 FF  		nextreg     MMU0_0000_NR_50, $ff
 32+  8150 ED 91 51 FF  		nextreg     MMU1_2000_NR_51, $ff
 33+  8154
 34+  8154              		; clear ULA
 35+  8154 21 00 40     		ld          hl, 16384
 36+  8157 11 01 40     		ld          de, 16385
 37+  815A 01 00 1B     		ld          bc, 6912
 38+  815D 36 00        		ld          (hl), 0
 39+  815F ED B0        		ldir
 40+  8161
 41+  8161 C9           		ret
 42+  8162
 43+  8162
 44+  8162              set_clipping:
 45+  8162
 46+  8162              	; clips ULA to 0,0
 47+  8162
 48+  8162 ED 91 1A 00  		nextreg     CLIP_ULA_LORES_NR_1A, 0
 49+  8166 ED 91 1A 00  		nextreg     CLIP_ULA_LORES_NR_1A, 0
 50+  816A ED 91 1A 00  		nextreg     CLIP_ULA_LORES_NR_1A, 0
 51+  816E ED 91 1A 00  		nextreg     CLIP_ULA_LORES_NR_1A, 0
 52+  8172
 53+  8172
 54+  8172 ED 91 18 00  		nextreg		CLIP_LAYER2_NR_18, 0
 55+  8176 ED 91 18 FF  		nextreg		CLIP_LAYER2_NR_18, 255
 56+  817A ED 91 18 00  		nextreg		CLIP_LAYER2_NR_18, 0
 57+  817E ED 91 18 FF  		nextreg		CLIP_LAYER2_NR_18, 255
 58+  8182
 59+  8182
 60+  8182 C9           		ret
 61+  8183
 62+  8183
 63+  8183              gen_palette:
 64+  8183
 65+  8183              		; A > offset
 66+  8183
 67+  8183 ED 91 52 1C  		nextreg 		$52,28 								; bring in palette to $4000
 68+  8187 21 00 40     		ld      		hl, $4000							; point hl to start of palette
 69+  818A ED 31        		add     		hl, a								; hl = @palette+offset
 70+  818C 11 EC 81     		ld      		de, palette_buffer					; point de to palette
 71+  818F 01 00 02     		ld      		bc, 512								;
 72+  8192              .uploop1:
 73+  8192 ED A0        		ldi 												; copy offset to de
 74+  8194 23           		inc 			hl 									; move to next colour
 75+  8195 78           		ld      		a, b 								; have we done 512 loops?
 76+  8196 B1           		or      		c
 77+  8197 20 F9        		jr      		nz,.uploop1							; no then jump to uploop1
 78+  8199 21 EC 81     		ld      		hl,palette_buffer					; point hl to palette_buffer
 79+  819C 06 00        		ld      		b,0									; 256 loops
 80+  819E ED 91 43 11  		nextreg 		PALETTE_CONTROL_NR_43, %00010001	; ensure L2 palette is selected
 81+  81A2 ED 91 40 00  		nextreg 		$40,0 								; move to index 0
 82+  81A6              .uploop:
 83+  81A6 7E           		ld      		a,(hl)								; get colour
 84+  81A7 ED 92 44     		nextreg 		$44, a  							; set colout
 85+  81AA 23           		inc     		hl 									; move to RGB9 Blue bit but ignore
 86+  81AB ED 91 44 00  		nextreg 		$44, 0								; 332 RGB mode so set extra bit to 0
 87+  81AF 23           		inc     		hl 									; move to next colour
 88+  81B0 10 F4        		djnz    		.uploop								; repeat
 89+  81B2 ED 91 44 00  		nextreg			$44,0								; set first colour to 0
 90+  81B6 ED 91 44 00  		nextreg			$44,0
 91+  81BA
 92+  81BA ED 91 52 02  		nextreg 		$52,2								; bring back bank 2 to $4000
 93+  81BE C9           		ret
 94+  81BF
 95+  81BF
 96+  81BF              pal_cycle:
 97+  81BF
 98+  81BF              	; cycles the colours from hl
 99+  81BF
100+  81BF 21 EC 81     		ld			hl,palette_buffer
101+  81C2 06 1F        		ld 			b,31									; number of colours to cycle?
102+  81C4
103+  81C4 3E 00        		ld 			a,0										; offset into colour index
104+  81C6
105+  81C6              .loadpal:
106+  81C6
107+  81C6 11 EC 81     		ld 			de,palette_buffer						; set de to palette
108+  81C9
109+  81C9 1A           		ld 			a,(de)									; get the first colour
110+  81CA F5           		push 		af 										; save the value
111+  81CB 21 ED 81     		ld 			hl,palette_buffer+1						; copy palette+1 back 1 space
112+  81CE 11 EC 81     		ld 			de,palette_buffer
113+  81D1 01 FE 00     		ld 			bc,254									; do for 255 colours
114+  81D4 ED B0        		ldir 												;
115+  81D6 F1           		pop 		af 										; bring back fist colour
116+  81D7 12           		ld 			(de),a 									; place at end
117+  81D8 21 EC 81     		ld 			hl,palette_buffer								; point hl to updated palette
118+  81DB
119+  81DB 06 FF        		ld 			b,255									; 255 loops
120+  81DD AF           		xor 		a										; flatten a
121+  81DE              .palloop:
122+  81DE
123+  81DE ED 92 40     		nextreg 	PALETTE_INDEX_NR_40,a					; move palette index to a
124+  81E1 57           		ld 			d,a 									; save a in d
125+  81E2 7E           		ld 			a,(hl)									; load first value, send to NextReg
126+  81E3 ED 92 41     		nextreg 	$41,a 									; set the colour
127+  81E6 23           		inc 		hl 										; increase palette location
128+  81E7 7A           		ld 			a,d 									; bring back palette index
129+  81E8 3C           		inc 		a 										; incread palette index
130+  81E9 10 F3        		djnz 		.palloop								; loop until all colours done
131+  81EB C9           		ret
# file closed: src/layer2.asm
 61   81EC
 62   81EC                      outend
 63   81EC
 64   81EC              ;------------------------------------------------------------------------------
 65   81EC              ; Data section
 66   81EC
 67   81EC              palette_buffer:                                         ; used to cache palette for cycling
 68   81EC 00 00 00...          defs    512,0
 69   83EC
 70   83EC              ;------------------------------------------------------------------------------
 71   83EC              ; Memory banks
 72   83EC
 73   83EC                      mmu 7   n, 18                                   ; load to bank 18 which is the start of L2 memory
 74   83EC                      org     $e000
 75   E000                      incbin  "../assets/output320.bin"               ; precalculated image
 76   E000                      mmu 7   n, 28
 77   E000                      org     $e000
 78   E000                      incbin  "../assets/rainbow.pal"                 ; palette for cycling
 79   E200
 80   E200
 81   E200              ;------------------------------------------------------------------------------
 82   E200              ; Output configuration
 83   E200                      SAVENEX OPEN "320Cycle.nex", main, stack_top
 84   E200                      SAVENEX CORE 3,0,0
 85   E200                      SAVENEX CFG 7,0,0,0
 86   E200                      SAVENEX AUTO
 87   E200                      SAVENEX CLOSE
# file closed: src/main.asm
